// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: chat-mgmt/chat_management.proto

package chat_mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatManagement_CreateChat_FullMethodName  = "/sso.ChatManagement/CreateChat"
	ChatManagement_DeleteChat_FullMethodName  = "/sso.ChatManagement/DeleteChat"
	ChatManagement_UpdateChat_FullMethodName  = "/sso.ChatManagement/UpdateChat"
	ChatManagement_JoinChat_FullMethodName    = "/sso.ChatManagement/JoinChat"
	ChatManagement_KickUser_FullMethodName    = "/sso.ChatManagement/KickUser"
	ChatManagement_CanWrite_FullMethodName    = "/sso.ChatManagement/CanWrite"
	ChatManagement_MakeAdmin_FullMethodName   = "/sso.ChatManagement/MakeAdmin"
	ChatManagement_DeleteAdmin_FullMethodName = "/sso.ChatManagement/DeleteAdmin"
	ChatManagement_IsAdmin_FullMethodName     = "/sso.ChatManagement/IsAdmin"
)

// ChatManagementClient is the client API for ChatManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatManagementClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error)
	UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*UpdateChatResponse, error)
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error)
	KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*KickUserResponse, error)
	CanWrite(ctx context.Context, in *CanWriteRequest, opts ...grpc.CallOption) (*CanWriteResponse, error)
	MakeAdmin(ctx context.Context, in *MakeAdminRequest, opts ...grpc.CallOption) (*MakeAdminResponse, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*DeleteAdminResponse, error)
	IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error)
}

type chatManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewChatManagementClient(cc grpc.ClientConnInterface) ChatManagementClient {
	return &chatManagementClient{cc}
}

func (c *chatManagementClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, ChatManagement_CreateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error) {
	out := new(DeleteChatResponse)
	err := c.cc.Invoke(ctx, ChatManagement_DeleteChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*UpdateChatResponse, error) {
	out := new(UpdateChatResponse)
	err := c.cc.Invoke(ctx, ChatManagement_UpdateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error) {
	out := new(JoinChatResponse)
	err := c.cc.Invoke(ctx, ChatManagement_JoinChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*KickUserResponse, error) {
	out := new(KickUserResponse)
	err := c.cc.Invoke(ctx, ChatManagement_KickUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) CanWrite(ctx context.Context, in *CanWriteRequest, opts ...grpc.CallOption) (*CanWriteResponse, error) {
	out := new(CanWriteResponse)
	err := c.cc.Invoke(ctx, ChatManagement_CanWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) MakeAdmin(ctx context.Context, in *MakeAdminRequest, opts ...grpc.CallOption) (*MakeAdminResponse, error) {
	out := new(MakeAdminResponse)
	err := c.cc.Invoke(ctx, ChatManagement_MakeAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*DeleteAdminResponse, error) {
	out := new(DeleteAdminResponse)
	err := c.cc.Invoke(ctx, ChatManagement_DeleteAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error) {
	out := new(IsAdminResponse)
	err := c.cc.Invoke(ctx, ChatManagement_IsAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatManagementServer is the server API for ChatManagement service.
// All implementations must embed UnimplementedChatManagementServer
// for forward compatibility
type ChatManagementServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error)
	UpdateChat(context.Context, *UpdateChatRequest) (*UpdateChatResponse, error)
	JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error)
	KickUser(context.Context, *KickUserRequest) (*KickUserResponse, error)
	CanWrite(context.Context, *CanWriteRequest) (*CanWriteResponse, error)
	MakeAdmin(context.Context, *MakeAdminRequest) (*MakeAdminResponse, error)
	DeleteAdmin(context.Context, *DeleteAdminRequest) (*DeleteAdminResponse, error)
	IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error)
	mustEmbedUnimplementedChatManagementServer()
}

// UnimplementedChatManagementServer must be embedded to have forward compatible implementations.
type UnimplementedChatManagementServer struct {
}

func (UnimplementedChatManagementServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatManagementServer) DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedChatManagementServer) UpdateChat(context.Context, *UpdateChatRequest) (*UpdateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChat not implemented")
}
func (UnimplementedChatManagementServer) JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChatManagementServer) KickUser(context.Context, *KickUserRequest) (*KickUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedChatManagementServer) CanWrite(context.Context, *CanWriteRequest) (*CanWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanWrite not implemented")
}
func (UnimplementedChatManagementServer) MakeAdmin(context.Context, *MakeAdminRequest) (*MakeAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAdmin not implemented")
}
func (UnimplementedChatManagementServer) DeleteAdmin(context.Context, *DeleteAdminRequest) (*DeleteAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedChatManagementServer) IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}
func (UnimplementedChatManagementServer) mustEmbedUnimplementedChatManagementServer() {}

// UnsafeChatManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatManagementServer will
// result in compilation errors.
type UnsafeChatManagementServer interface {
	mustEmbedUnimplementedChatManagementServer()
}

func RegisterChatManagementServer(s grpc.ServiceRegistrar, srv ChatManagementServer) {
	s.RegisterService(&ChatManagement_ServiceDesc, srv)
}

func _ChatManagement_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_UpdateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).UpdateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_UpdateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).UpdateChat(ctx, req.(*UpdateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_JoinChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_KickUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).KickUser(ctx, req.(*KickUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_CanWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).CanWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_CanWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).CanWrite(ctx, req.(*CanWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_MakeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).MakeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_MakeAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).MakeAdmin(ctx, req.(*MakeAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_DeleteAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).DeleteAdmin(ctx, req.(*DeleteAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManagement_IsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).IsAdmin(ctx, req.(*IsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatManagement_ServiceDesc is the grpc.ServiceDesc for ChatManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.ChatManagement",
	HandlerType: (*ChatManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatManagement_CreateChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _ChatManagement_DeleteChat_Handler,
		},
		{
			MethodName: "UpdateChat",
			Handler:    _ChatManagement_UpdateChat_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _ChatManagement_JoinChat_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _ChatManagement_KickUser_Handler,
		},
		{
			MethodName: "CanWrite",
			Handler:    _ChatManagement_CanWrite_Handler,
		},
		{
			MethodName: "MakeAdmin",
			Handler:    _ChatManagement_MakeAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _ChatManagement_DeleteAdmin_Handler,
		},
		{
			MethodName: "IsAdmin",
			Handler:    _ChatManagement_IsAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat-mgmt/chat_management.proto",
}
