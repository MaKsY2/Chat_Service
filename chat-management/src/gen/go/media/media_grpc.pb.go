// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: media/media.proto

package media

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaHandler_StoreImage_FullMethodName = "/media.MediaHandler/StoreImage"
)

// MediaHandlerClient is the client API for MediaHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaHandlerClient interface {
	StoreImage(ctx context.Context, opts ...grpc.CallOption) (MediaHandler_StoreImageClient, error)
}

type mediaHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaHandlerClient(cc grpc.ClientConnInterface) MediaHandlerClient {
	return &mediaHandlerClient{cc}
}

func (c *mediaHandlerClient) StoreImage(ctx context.Context, opts ...grpc.CallOption) (MediaHandler_StoreImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaHandler_ServiceDesc.Streams[0], MediaHandler_StoreImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaHandlerStoreImageClient{stream}
	return x, nil
}

type MediaHandler_StoreImageClient interface {
	Send(*StoreImageRequest) error
	CloseAndRecv() (*ImageResponse, error)
	grpc.ClientStream
}

type mediaHandlerStoreImageClient struct {
	grpc.ClientStream
}

func (x *mediaHandlerStoreImageClient) Send(m *StoreImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaHandlerStoreImageClient) CloseAndRecv() (*ImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaHandlerServer is the server API for MediaHandler service.
// All implementations must embed UnimplementedMediaHandlerServer
// for forward compatibility
type MediaHandlerServer interface {
	StoreImage(MediaHandler_StoreImageServer) error
	mustEmbedUnimplementedMediaHandlerServer()
}

// UnimplementedMediaHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedMediaHandlerServer struct {
}

func (UnimplementedMediaHandlerServer) StoreImage(MediaHandler_StoreImageServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreImage not implemented")
}
func (UnimplementedMediaHandlerServer) mustEmbedUnimplementedMediaHandlerServer() {}

// UnsafeMediaHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaHandlerServer will
// result in compilation errors.
type UnsafeMediaHandlerServer interface {
	mustEmbedUnimplementedMediaHandlerServer()
}

func RegisterMediaHandlerServer(s grpc.ServiceRegistrar, srv MediaHandlerServer) {
	s.RegisterService(&MediaHandler_ServiceDesc, srv)
}

func _MediaHandler_StoreImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaHandlerServer).StoreImage(&mediaHandlerStoreImageServer{stream})
}

type MediaHandler_StoreImageServer interface {
	SendAndClose(*ImageResponse) error
	Recv() (*StoreImageRequest, error)
	grpc.ServerStream
}

type mediaHandlerStoreImageServer struct {
	grpc.ServerStream
}

func (x *mediaHandlerStoreImageServer) SendAndClose(m *ImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaHandlerStoreImageServer) Recv() (*StoreImageRequest, error) {
	m := new(StoreImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaHandler_ServiceDesc is the grpc.ServiceDesc for MediaHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.MediaHandler",
	HandlerType: (*MediaHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreImage",
			Handler:       _MediaHandler_StoreImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "media/media.proto",
}
